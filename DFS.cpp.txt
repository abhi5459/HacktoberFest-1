// C++ program to print DFS traversal from 
// a given vertex in a given graph 
#include<bits/stdc++.h> 
using namespace std; 

// Graph class represents a directed graph 
// using adjacency list representation 
class Graph 
{ 
	int V; // No. of vertices 

	// Pointer to an array containing 
	// adjacency lists 
	list<int> *adj; 

	// A recursive function used by DFS 
	void DFSUtil(int v, bool visited[]); 
public: 
	Graph(int V); // Constructor 

	// function to add an edge to graph 
	void addEdge(int v, int w); 

	// DFS traversal of the vertices 
	// reachable from v 
	void DFS(int v); 
}; 

Graph::Graph(int V) 
{ 
	this->V = V; 
	adj = new list<int>[V]; 
} 

void Graph::addEdge(int v, int w) 
{ 
	adj[v].push_back(w); // Add w to vâ€™s list. 
} 


// Driver code 
int main() 
{ 
	// Create a graph given in the above diagram 
	int n,m;
	cin>>n>>m;
	Graph g(n); 
	for(int i=0;i<m;i++)
	{
		int a,b;
		cin>>a>>b;
		g.addEdge(a,b);
	}
	int k;
	cout << "Following is Depth First Traversal "
		<< "(starting from vertex "<<k<<" ) \n"; 
	g.BFS(k); 
	return 0; 
} 
